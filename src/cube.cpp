#include "cube.hpp"
#include <array>
#include <fmt/core.h>

// Data generated by "python scripts/convert_obj.py data/cube.obj"

static const float vertices[] = {
    -0.5, 0.5, 0.5, -0.5, -0.5, 0.5, -0.5, 0.5, -0.5,
    -0.5, -0.5, -0.5, 0.5, 0.5, 0.5, 0.5, -0.5, 0.5,
    0.5, 0.5, -0.5, 0.5, -0.5, -0.5,
};

static const float normals[] = {
    -0.0, 1.0, -0.0, -0.0, -0.0, -1.0, 1.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, 1.0,
};

static const uint16_t triangles[] = {
    4, 0, 2, 0, 0, 0, 2, 1, 7, 1, 3, 1, 6, 2, 5, 2, 7, 2,
    1, 3, 7, 3, 5, 3, 0, 4, 3, 4, 1, 4, 4, 5, 1, 5, 5, 5,
    4, 0, 6, 0, 2, 0, 2, 1, 6, 1, 7, 1, 6, 2, 4, 2, 5, 2,
    1, 3, 3, 3, 7, 3, 0, 4, 2, 4, 3, 4, 4, 5, 0, 5, 1, 5,
};

void addCube(Buffer &buffer, glm::mat4 transform)
{
    unsigned char r = 255;
    unsigned char g = 255;
    unsigned char b = 255;
    unsigned char a = 255;
    VertexIndex v0, v1, v2;
    for (auto i = 0; i < sizeof(triangles) / sizeof(uint16_t); i += 6) {
        uint16_t vi, ni;
        vi = triangles[i];
        ni = triangles[i+1];
        v0 = addVertex(buffer, {
            {vertices[vi*3], vertices[(vi*3)+1], vertices[(vi*3)+2]},
            {normals[ni*3], normals[(ni*3)+1], normals[(ni*3)+2]},
            {r, g, b, a}});
        vi = triangles[i+2];
        ni = triangles[i+3];
        v1 = addVertex(buffer, {
            {vertices[vi*3], vertices[(vi*3)+1], vertices[(vi*3)+2]},
            {normals[ni*3], normals[(ni*3)+1], normals[(ni*3)+2]},
            {r, g, b, a}});
        vi = triangles[i+4];
        ni = triangles[i+5];
        v2 = addVertex(buffer, {
            {vertices[vi*3], vertices[(vi*3)+1], vertices[(vi*3)+2]},
            {normals[ni*3], normals[(ni*3)+1], normals[(ni*3)+2]},
            {r, g, b, a}});
        addTriangle(buffer, v0, v1, v2);
    }
}
